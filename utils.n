import json

alias pub reviewData = {
  timesRequested: int
  timesResponded: int
  averageResponseTime: int
}

alias pub configData = {
  repoAuthor: str
  repoName: str
  export: bool
  checkTeams: bool
  port: int
  warnUpdate: bool
  checkDiff:bool
}

// colors
let pub GREEN = "\u{1b}[" + intInBase10(32) + "m"
let pub YELLOW = "\u{1b}[" + intInBase10(33) + "m"
let pub RESET = "\u{1b}[" + intInBase10(39) + "m"

let pub parseConfig = [data:json.value] -> configData {
  let out = {
    repoAuthor: ""
    repoName: ""
    export: false
    checkTeams: false
    port: 8080
    warnUpdate: true
    checkDiff: true
  }

  if let <object jsonData> = data {
    if let <yes <string author>> = jsonData["repoAuthor"] {
      var out = {
        ..out
        repoAuthor: author
      }
    }

    if let <yes <string name>> = jsonData["repoName"] {
      var out = {
        ..out
        repoName: name
      }
    }

    if let <yes <boolean exp>> = jsonData["export"] {
      var out = {
        ..out
        export: exp
      }
    }

    if let <yes <boolean teams>> = jsonData["checkTeams"] {
      var out = {
        ..out
        checkTeams: teams
      }
    }

    if let <yes <number p>> = jsonData["port"] {
      var out = {
        ..out
        port: floor(p)
      }
    }

    if let <yes <boolean warn>> = jsonData["warnUpdate"] {
      var out = {
        ..out
        warnUpdate: warn
      }
    }

    if let <yes <boolean diff>> = jsonData["checkDiff"] {
      var out = {
        ..out
        checkDiff: diff
      }
    }
  }

  return out
}

let pub reviewDataToJson = [data:map[str, reviewData]] -> json.value {
  let jsonedData = []

  for (name, d in entries(data)) {
    var jsonedData = jsonedData
                              |> append(
                                (name, json.object(mapFrom([
                                  ("timesRequested", json.number(toFloat(d.timesRequested))),
                                  ("timesResponded", json.number(toFloat(d.timesResponded))),
                                  ("averageResponseTime", json.number(toFloat(d.averageResponseTime))),
                                ])))
                              )
  }

  return json.object(mapFrom(jsonedData))
}

let pub convertTextToBytes = [data:str] -> list[int] {
  return range(0, len(data), 1)
                              |> filterMap([i:int] -> maybe[int] {
                                if let <yes code> = data[i] {
                                  return yes(charCode(code))
                                }

                                return none
                              })
}

let pub multString = [i:int s:str] -> str {
  let out = ""
  for (j in range(0, i, 1)) {
    var out = out + s
  }

  return out
}

let pub getUserTeams = [user:str teams:list[(str, list[str])]] -> list[str] {
  let out = []
  for (team, users in teams) {
    if user in users {
      var out = out |> append(team)
    }
  }

  return out
}

let pub removeDuplicates = [[t] l:list[t]] -> list[t] {
  let out = []
  for (i in l) {
    if ~(i in out) {
      var out = out |> append(i)
    }
  }

  return out
}

let pub getChangesFromDiffFile = [diff:str] -> (int, int) {
  let added = 0
  let removed = 0
  for (line in (diff |> split(\n))) {
    if (substring(0, 6, line) == "--- a/" || substring(0, 6, line) == "+++ b/") {
      continue
    }

    if (line[0] == yes(\{+})) {
      var added = added + 1
    }

    if (line[0] == yes(\{-})) {
      var removed = removed + 1
    }
  }

  return (added, removed)
}