import json

alias reviewData = {
  timesRequested: int
  timesResponded: int
  averageResponseTime: int
}

alias configData = {
  repoAuthor: str
  repoName: str
  export: bool
  checkTeams: bool
}

// colors
let pub GREEN = "\u{1b}[" + intInBase10(32) + "m"
let pub YELLOW = "\u{1b}[" + intInBase10(33) + "m"
let pub RESET = "\u{1b}[" + intInBase10(39) + "m"

let pub parseConfig = [data:json.value] -> configData {
  let out = {
    repoAuthor: "nbuilding"
    repoName: "N-lang"
    export: false
    checkTeams: false
  }

  if let <object jsonData> = data {
    if let <yes <string author>> = jsonData["repoAuthor"] {
      var out = {
        ..out
        repoAuthor: author
      }
    }

    if let <yes <string name>> = jsonData["repoName"] {
      var out = {
        ..out
        repoName: name
      }
    }

    if let <yes <boolean exp>> = jsonData["export"] {
      var out = {
        ..out
        export: exp
      }
    }

    if let <yes <boolean teams>> = jsonData["checkTeams"] {
      var out = {
        ..out
        checkTeams: teams
      }
    }
  }

  return out
}

let pub reviewDataToJson = [data:map[str, reviewData]] -> json.value {
  let jsonedData = []

  for (name, d in entries(data)) {
    var jsonedData = jsonedData
                              |> append(
                                (name, json.object(mapFrom([
                                  ("timesRequested", json.number(toFloat(d.timesRequested))),
                                  ("timesResponded", json.number(toFloat(d.timesResponded))),
                                  ("averageResponseTime", json.number(toFloat(d.averageResponseTime))),
                                ])))
                              )
  }

  return json.object(mapFrom(jsonedData))
}

let pub convertTextToBytes = [data:str] -> list[int] {
  return range(0, len(data), 1)
                              |> filterMap([i:int] -> maybe[int] {
                                if let <yes code> = data[i] {
                                  return yes(charCode(code))
                                }

                                return none
                              })
}

let pub multString = [i:int s:str] -> str {
  let out = ""
  for (j in range(0, i, 1)) {
    var out = out + s
  }

  return out
}

let pub getUserTeams = [user:str teams:list[(str, list[str])]] -> list[str] {
  let out = []
  for (team, users in teams) {
    if user in users {
      var out = out |> append(team)
    }
  }

  return out
}